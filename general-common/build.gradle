allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'

    ext {
    	profile=project.hasProperty('profile')? (project['profile']==""?"aic-dev":project['profile']) : "aic-dev"
        moduleVersion = "1.0-SNAPSHOT"
        optBaseVersion = "1.0.1-SNAPSHOT"
        builtBy = "gradle 2.2"
        publishUserName = "runnerdev"
        publishUserPassword = "runnerdev"
        publishURL = "http://10.1.228.199:18081/nexus/content/repositories/snapshots/"
        mavenPublicURL = "http://10.1.228.199:18081/nexus/content/groups/public/"
        
        /*
        publishUserName = "admin"
        publishUserPassword = "admin123"
        publishURL = "http://202.98.157.5:8003/nexus/content/repositories/upSnapshots/"
        mavenPublicURL = "http://202.98.157.5:8003/nexus/content/groups/public/"
        */
    }

    compileJava.dependsOn clean
    sourceCompatibility = 1.7

    configurations.all { 
	    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
 	}
    group="com.ai.platform.common"
}

subprojects {
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        maven { url mavenPublicURL }
    }
    
    sourceSets {
        main {
	        java {
	            srcDirs = [
	                'src/main/java'
	            ]
	        }
	        resources { srcDirs = ['src/main/resources']}
	    }

	    test {
	        java {
	            srcDirs = [
	                'src/test/java'
	            ]
	        }
	        resources { srcDirs = ['src/test/resources']}
	    }
    }

    dependencies {
    	compile "com.ai.opt:opt-base:${optBaseVersion}"
        compile 'com.ai.opt.validator:opt-validator:1.0.1'
        compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    }

}

project("general-common-api") {
    project.ext {
        appName = "general-common-api"
        apiDir =  "src/main/java/com/ai/platform/common/api/"
    }

    jar {
        baseName appName
        version moduleVersion
        manifest {
            attributes 'packageName': appName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
        }
    }
    publish.dependsOn build

}

project("general-common-core") {
    project.ext {
        appName = "general-common-core"
    }

    jar {
        baseName appName
        version moduleVersion
		include "com/ai/platform/common/*/*/**"
        manifest {
            attributes 'packageName': appName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
        }
    }
}



jar {
    baseName baseName
    version moduleVersion
    destinationDir file("$buildDir/m-libs/")
    manifest {
        attributes 'packageName': baseName, 'Built-By': builtBy, 'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
    }
}

configure(subprojects) { subproject ->
    task sourcesJar(type: Jar, dependsOn:classes) { from sourceSets.main.output }
    artifacts { archives sourcesJar }
}
task copySubProjectsJar(type: Copy) {
    /*
    subprojects.each { subproject ->
        from subproject.jar
        destinationDir file("$buildDir/libs/core-libs")
    }
    */
    
    from project(":general-common-api").jar
        destinationDir file("$buildDir/libs/core-libs")
    from project(":general-common-core").jar
        destinationDir file("$buildDir/libs/core-libs")    
   
}
task copy3rdJars(type: Copy) {
	/*
    subprojects.each { subproject ->
        from subproject.configurations.runtime
        exclude "sys-api-*.*"
        destinationDir file("$buildDir/libs/3rd-libs")
    }
    */
    from project(":general-common-api").configurations.runtime
        exclude "sys-api-*.*"
        destinationDir file("$buildDir/libs/3rd-libs")
    from project(":general-common-core").configurations.runtime
        exclude "sys-api-*.*"
        destinationDir file("$buildDir/libs/3rd-libs")    
    
}

task copySubProjectsConfig(type: Copy) {
	/*
    subprojects.each { subproject ->
        from subproject.fileTree(dir: 'src/main/resources')+subproject.fileTree(dir: 'profile/'+profile)
        destinationDir file("$buildDir/config")
    }
    */
     from project(":general-common-api").fileTree(dir: 'src/main/resources')+project(":general-common-core").fileTree(dir: 'profile/'+profile)
        destinationDir file("$buildDir/config")
     from project(":general-common-core").fileTree(dir: 'src/main/resources')+project(":general-common-core").fileTree(dir: 'profile/'+profile)
        destinationDir file("$buildDir/config")
}

task zipLibs(type: Zip) {
	baseName "libs"
    from "$buildDir/libs"
}

task zipConfig(type: Zip) {
	baseName "config"
    from "$buildDir/config"
}


build.dependsOn copySubProjectsJar,copy3rdJars,copySubProjectsConfig

