apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

compileJava.dependsOn clean

sourceCompatibility = 1.7

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
    
checkstyleMain {
    ignoreFailures = false
    reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/checkstyle/${project.name}.xml" )
        }
    }
    configFile = new File(rootDir, 'checkstyle.xml')
}

checkstyleTest {
	ignoreFailures = false
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/checkstyle/${project.name}_test.xml" )
		}
	}
	configFile = new File(rootDir, 'checkstyle.xml')
}

findbugsMain {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/findbugs/${project.name}.xml" )
        }
    }
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

findbugsTest {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/findbugs/${project.name}_test.xml" )
        }
    }
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

pmdMain {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/pmd/${project.name}.xml" )
        }
    }
}

pmdTest {
	ignoreFailures = true
	reports {
        include ( '**/*.java')
        xml {
           destination = new File(rootDir, "reports/pmd/${project.name}_test.xml" )
        }
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    maven{ url "http://10.1.228.199:18081/nexus/content/groups/public/"  }
}

sourceSets {
    main {
        java { srcDirs = ['src/main/java']}
         resources {
               srcDirs = ['src/main/resources']
         }
    }
    test{
    	 java { srcDirs = ['src/test/java']}
         resources {
               srcDirs = ['src/test/resources']
               srcDirs = ['src/test/resources']
         }
    }
}

 
ext {
	moduleVersion = version != "unspecified"?version:'0.3'
	moduleMode = project.hasProperty('mode') ? project.getProperty('mode') : 'R'
	if(moduleMode == 'S'){
		moduleVersion = moduleVersion + "-SNAPSHOT";
	}
	moduleName="ipaas-uac";
	publishUserName = "devadm"
	publishUserPassword = "Devadm@1212"
	publishSnapShotsURL="http://10.1.228.199:18081/nexus/content/repositories/snapshots/"
	publishReleaseURL="http://10.1.228.199:18081/nexus/content/repositories/releases/"
	builtBy="gradle 2.1" 
} 

group = 'com.ai'

dependencies{
	compile 'com.ai:ipaas-common:0.3'
	testCompile 'junit:junit:4.12'
	testCompile	 ('org.apache.jmeter:ApacheJMeter_junit:2.13'){
		 exclude group: 'commons-math3', module: 'commons-math3'
		 exclude group: 'commons-pool2', module: 'commons-pool2'
    }
}


jar {
    baseName moduleName
    version moduleVersion
	manifest {
        attributes 'packageName': moduleName, 'Built-By': builtBy,'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	baseName moduleName
    version moduleVersion
    classifier = 'sources'
    from sourceSets.main.allSource
}
javadoc {
	exclude               "**/internal/**"
	failOnError				false
	options.memberLevel = JavadocMemberLevel.PUBLIC
	
	options.addStringOption("Xdoclint", "none")
	
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	baseName moduleName
	version moduleVersion
	classifier = 'javadoc'

	from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
	archives javadocJar
}

task copyFiles << { 
        copy{ 
                from configurations.compile 
                into "$buildDir/testlibs" 
        } 
} 

task testJar(type:Jar){
	dependsOn copyFiles
    version moduleVersion
    baseName moduleName
    from sourceSets.main.output
    from sourceSets.test.output
    destinationDir file("$buildDir/testlibs")
 
	manifest {
        attributes 'packageName': moduleName, 'Built-By': builtBy,'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
    }
}

publish.dependsOn build 


publishing {
    publications {
       mavenJar(MavenPublication) {
        	groupId group
        	artifactId "${moduleName}"
            artifact sourcesJar
            version moduleVersion
            pom.withXml {
	            asNode().children().last() + {
	             delegate.dependencies {
	                    delegate.dependency {
	                        delegate.groupId("com.ai")
	                        delegate.artifactId("ipaas-common")
	                        delegate.version("0.3")
	                    }
	                }
	             }
	        }
	   }
       publishing.publications.create("${moduleName}", MavenPublication) {
            groupId group
            artifactId moduleName
            version moduleVersion
            artifact  jar
            pom.withXml {
	            asNode().children().last() + {
	                delegate.dependencies {
	                    delegate.dependency {
	                        delegate.groupId("com.ai")
	                        delegate.artifactId("ipaas-common")
	                        delegate.version("0.3")
	                    }
	                }
	            }
	        }
        }
    }
    repositories {
        maven {
            credentials {
                username = publishUserName
                password = publishUserPassword
            }
            if(moduleVersion.endsWith('-SNAPSHOT')) {
                url publishSnapShotsURL
            } else {
                url publishReleaseURL
            }
        }
    }
}

